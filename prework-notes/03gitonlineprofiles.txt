NOTES ---

PROJECT MODULE --
    -- GIT
        -- Branching and Merging
            -- Working in Contexts
                -- Each featuer, bugfix, experiment, or alternative of your product is actually a context of its own: it can be seen as its own "topic", clearly separated from other topics.
                -- In real world projects, work always happens in multiple of these contexts in parallel: (EX)
                    -- While you're preparing 2 new variations of your website's design (context 1 & 2)
                    -- you're also trying to fix an annoying bug (context 3)
                    -- On the side, you also update some content on your FAQ pages (context 4), while...
                    -- one of your teammates is working on a new feature for your shopping cart (context 5), ...
                    -- and another collegue is experimenting with a whole new login functionality (context 6).

            -- A World Without Branches
                -- NOT working in clearly separated contexts can (and sooner or later will) cause several problems.
                -- If your goal is to work professionally, you'll have to find a way to deal with multiple contexts in a professional manner.
            
            -- Branches to the Rescue
                -- Beacuse a branch represents exactly such a context in a project and helps you keep it separate from all other contexts.
                -- All the changes you make at any time will only apply to the CURRENT branch and all other ones will be left untouched. This gives you the freedome to both work on different things in parallel and to experiment becuase you can't mess up! In case things go wrong, you can always go back / undo / start fresh / switch contexts...
                -- There's NO REASON NOT TO start a new branch when starting a new context, no matter how big or small it might be.

                #3 GOLDEN RULE OF VERSION CONTROL:
                    Branching is one of Git's most powerful features -- and this is not by accident: quick and easy branching was a central requirement from day one. Branches are the perfect tool to help you avoid mixing up different lines of development. You should use branches extensively in your development workflows: for new features, bug fixes, experiments, ideas...

            -- Working with Branches
                -- Branches aren't option in Git: you are ALWAYS working on a certain branch (the currently active, or "checked out", or "HEAD" branch).
                -- The "git status" command tells us the in its first line of output: "On branch master"
                -- "Master" branch was created automatically by Git. You can rename it or delete it, but most people just keep it. It is not special and works just like any other branch you'll make.
                
                git branch <branch-name> : creates a new branch
                git branch : lists all branches
                git branch -v : lists all branches with a little more data than usual

                -- "git branch" only creates a new branch, but doesn't automatically switch to it.
                
                #4 GOLDEN RULE OF VERSION CONTROL:
                    You should only commit code when it's completed. This doesn't mean you have to complete a whole, large feature before committing. Quite the contrary: split the feature's implementation into logical chunks and remember to commit early and often. But don't commit just to get half-done work out of your way when you need a "clean working copy". For these cases, consider using Git's "Stash" feature instead.

            -- Saving Changes Temporarily
                -- A commit wraps up changes and saves them permanently in the repository.
                -- In your day-to-day work, there are a lot of situations where you only want to save your local changes temporarily.
                
                -- THE STASH
                    Think of the Stash as a clipboard on steroids: it takes all the changes in your working copy and saves them for you on a new clipboard. You're left with a clean working copy, i.e. you have no more local changes.

                    Later, at any time, you can restore the changes from that clipboard in your working copy - and continue working where you left off.

                    You can create as many Stashes as you want - you're not limited to storing only one set of changes. Also, a Stash is not bound to he branch where you created it: when you restore it, the changes will be applied to your current HEAD branch, whichever this may be.

                git stash : saves your working copy to the stash and goes back to the clean copy or whatever
                git stash list : get an overview of your current Stashes; the newest Stash will alwyas be at the top of the list. Older stashes have higher numbers.

                -- When you're ready to restore a saved Stash, you have two options:
                    git stash pop : will apply the newest Stash and clear it from your Stash clipboard
                    git stash apply <stashname> : will also apply the specified Stash, but it will remain saved.
                    git stash drop <stashname> : deletes <stashname>

                    If you don't specify the Stash name when using these commands, it will simply take the newest Stash.

                -- When to Stash
                    -- Stashing helps you get a clean working copy. While this can be helpful in many situations, it's strongly recommended...
                        ... before checking out a different branch.
                        ... before pulling remote changes.
                        ... before merging or rebasing a branch.

            -- Checking Out a Local Branch
                -- git checkout <branch-name>
                    Makes <branch-name> the current HEAD branch. All changes / commits made under this branch will not appear in the main branch until you merge them.
                -- You can only have one HEAD at a time.

            -- Merging Changes
                -- Keeping commits separated in branches can be a huge help, but eventually you'll want to merge them into your "production" branch.
                -- Integrating Branches - Not Individual Commits
                    -- When merging, you don't have to (and can't) pick individual commits that shall be integrated. You pick which branch you want to merge and Git will figure out which commits you don't have in your current working branch.

                -- Merging is "easy":
                    1. Checkout the branch that should recieve the changes.
                    2. Call the "git merge" command with the name of the branch that contains the desired changes

                -- git log
                    Will show what got merged and such.

                -- In some situations, merging will result in one or more "merge conflicts" -- most likely because the exact same line was modified in two different ways. You'll have to decide which content you want by dealing with the merge conflict.

            -- Branching Workflows
                -- Shortlived Branches
                    -- Be generous about creating branches for new features, bug fixes, and experiments (etc).
                    -- Branches for these things share two important characteristics:
                        -- They are about a SINGLE TOPIC and are used to isolate code belonging to this topic from any other code. EX: You shouldn't be creating a "shopping-cart" branch to then also commit code dealing with newsletter signup or bug#341 to it.
                        -- They typically have a rather short lifespan, usually only until you've finished working on the topic (I.e. when the bug is fixed, feature is completed). Then merging the branch into the broader concept and then the branch can be deleted.

                -- Long-Running Branches
                    -- Other branches are used on a higher level. They represent states in your project lifecycle - like a "production", "testing", or "development" state. They remain in your project a longer time (or even all the time).
                    -- A couple of rules belong to these types of branches:
                        -- You shouldn't work on them directly. Instead, you integrate other branches (possibly feature branches or other long-running branches) into them, but rarely add commits directly to them.
                        -- Often, long running branches have a hierarchy btween them: e.g. "master" is used as the highest-order branch. It should only contain production code. Subordinate to it exists a "development" branch. It's used to test developed features and is then integrated into "master"...

                    -- Which long-running branches to create and how they should be used can't be generalized. It depends on the team and the requirements of the project. Clear rules must exist and be agreed on by everyone.

                -- A Very Simple Branching Strategy
                    -- One Long Running Branch Only
                        -- This keeps things as simple as possible.
                        -- In such a scenario, the "master" branch represents your production code.
                        -- This has one important consequence: everything that gets merged into "master" must be stable! Tested, reveiwed, and approved by whatever methods else you have to assure quality.
                        -- No work should happen directly on "master".

                    -- Topic Branches
                        -- Every time you start working on a new feature or bugfix, you should create a new branch for this topic. This is common practice and should become a habit for you.
                        -- All new topic branches are based off the "master", since you only have one long-running branch. And when it's done, it should be merged back in.
                        -- It is reccommended and simple to merge new stuff often from master into your development branch so that you're staying up-to-date and reducing the risk of merge conflicts (which are fucking awful!!)
                        -- Golden rule: Code that gets integrated into "master" must be stable!

                    -- Keep the Remote in Sync
                        -- Remote and local branches can be completely independent from each other. However, it makes great sense to regard local and remote branches as counterparts of each other.
                        -- You don't have to publish EACH of your local branches: it can make perfect sense to keep some of your branches privated e.g. if you're doing experimental stuff that you're working on alone.
                        -- If you do publish a local branch, you should name it's remote counterpart branch the same.

                    -- Push Often
                        -- Publishing your work often via "git push" makes sure that everybody has always access to the latest dvelopments.

                -- Other Branching Strategies
                    -- The above strategy is best suited for small agile teams. Larger teams might need more rules.
                    -- One particular workflow that might be worth a look is the popular "git-flow".
                    -- But, you might find that properly learning the Git basics and agreeing on a common workflow in a team will make "supplements" like git-flow superfluous.
        

        -- Sharing Work via Remote Repositories
            -- Introduction to Remote Repositories
                -- 90% of version control work happens in the local repository: staging, committing, viewing the status or the log/history, etc. If you're the only person workgin on your project, chances are you'll never need to set up a remote repository.
                -- Only when it comes to SHARING DATA with your teammates, a remote repo comes into play.
                -- A few things that distinguish local and remote repositories from each other:
                    -- Location: Local repositories are on the computers of team members. Remote repositories are hosted on a server that is accessible for all team members.
                    -- Features: Technically, a remote repository doesn't differ from a local one: it contains branches, commits, and tags just like a local repository. A remote repository doesnn't have a working directory, just a bare .git folder.
                    -- Usage: The actual work on your project happens only in your local repository: all modifications have to be made & committed locally. Those changes CAN be uploaded to a remote repository in order to share them with your team. Remote repositories are only thought as a means for sharing and exchanging code between developers -- not for actually working on files.
                    -- Creation: You have two options to get a local repository onto your machine: you can either create a new, empty one or clone it from an existing remote repository.

            -- Connecting a Remote Repository
                -- When you clone a repository from a remote server, Git automatically remembers this connection for you. It saves it as a remote called "origin" by default.
                -- Blah blah. You could do this in your sleep.

            -- Inspecting Remote Data
                -- You will not automatically see new commits or branches that your teammates published on a remote -- because you have to explicitly tell Git to update.
                -- Fetch will not touch any of your local branches or the files in your working copy. It just downloads data from the specified remote and makes it visible for you. You can decide later if you want to integrate these changes into your local project.
                -- git checkout --track <git-repo/remote-branch-name>
                    -- creates a new local branch with the same name as the remote one
                    -- Checks out this new branch, i.e. makes it our local HEAD branch and populates our working copy with the associated files
                    -- "--track" flag establishes a so-called "tracking relationship" between the new local branch and the remote branch it's based on.

                -- Tracking branches
                    -- In general, branches have nothing to do with each other. However, a local branch can be set up to "track" a remote branch. Git will then inform you if one branch contains new commits that the other one doesn't have:
                        -- If your local branch contains commits that haven't been published / pushed to the remote repository, your local branch is "ahead" of its remote counterpart branch by some commits.
                        -- If your teammates, on their part, have uploaded commits to the remote, the remote branch will have commits that you haven't downloaded / pulled to your lcoal branch, yet. Your local branch is then "behind" its remote counterpart branch.
                        
                -- Tracking Connectinos Revisited
                    -- By default, the "git push" command expects us to provide it with two things:
                        -- To which remote repository we want to push.
                        -- To which branch on that remote repository we want to push.

                    -- Would look like this: (only if no tracking connecting was established)
                        git push <remote-repository> <remote-branch>

            -- Integrating Remote Changes
                -- git pull
                    Downloads new commits from the remote and directly integrates them into your working copy.

            -- Publishing a Local Branch
                -- git push -u origin <unpublished-branch-name>
                    -- This command tells Git to publish our current local HEAD branch on the "origin" remote under the name "contact-form' (it makes sense to keep names between local and remote branches the same)
                    -- The "-u" flag estabishes a tracking connection between the local and remote branches.
        
            -- Deleting Branches
                -- git branch -d <branch-name>
                    Deletes the local branch.

                -- git push origin --delete <branch-name>
                    Deletes the remote branch.

        -- Regular Git Commits
            -- When you've finished a user story you should stage, commit, and push. When you've squashed a bug, you should stage, commit, and push. If you are working before bed, before you call it a night, you should stage, commit, and push.
            -- The more versions you have of your project, the more places you can revert back to.
            -- Most teams or companies define when their developers should stage, commit, and push. Once you get a job, you will learn what they'd like you to do.
            -- HIRING MANAGERS LOVE ACTIVE GIT PROFILES.
            -- Set a goal for yourself to contribute to your GitHub account a certain number of times each week, and by the end of this class you will have the start of a GitHub profile that hiring managers are intersted in.

    -- Licensing
        -- The Legal Side of Open Source
            -- When you make a creative work (such as writing, graphics, or code), that work is under exclusive copyright by default.
            -- This means that nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation.
            -- Open source is unusual because the author expects you to use, modify, and share the work. That's why you need a license.
            -- Making your GitHub project public is not the same as licensing your project!
            -- If you want others to use, distribute, modify, or contribute back to your project, you need to include an open source license.
            -- Go to choose a license to pick which standardized license will work for you.

    -- Online Profiles
        -- Technical Resume
            -- Need to quickly summarize your skills, give evidence of those skills, outline your learning journey so far, and then include everything else you would typically include with a resume.
                1. Personal Information
                    -- You must include your first and last name, a phone number where you can be reached, and a professional email address.
                    -- Also include a link to your GitHub profile, your LinkedIn profile, a physical address (Reggie said it was optional and he never does this), and a link to your personal website (if you have one).
                    -- A professional address is some variation of your name.
                2. Summary of Technical Skills
                    -- Prioritize programming languages, frameworks, and major libraries over operating systems and software.
                    -- Order skills from most familiar, to least familiar.
                    -- Consider the type of job you are looking for when arranging these things.
                    -- DO NOT include every language or technology you've heard of, only the ones you'd feel comfortable with building a project today.
                    -- An entry level developer will usually include fewer than 10 skills on their resume.
                3. Technical Experience
                    -- After listing the skills you have, you need to back up your skills with some experience you've gained with those skills. Do this by mentioning projects you have COMPLETED (My mock interviewer said don't include projects that aren't finished), or by outline professional experience that required the use of those skills.

                    -- For project resumes, include:
                        -- The project name
                        -- A breif description of the project
                        -- Skills used in the project
                        -- A key feature of your project
                        -- GitHub repo link

                        EX:
                        PROJECT EXPERIENCE:
                        Household Budgeting Web-App -- www.familybudget.com
                        A web-app that allows user to add members to their household and track incomes and expense by categories.
                            -- Java, Spring, Hibernate, Thymeleaf, MySQL, HTML, CSS, and jQuery.
                            -- Aside from the budge tracking features, it utilizes Spring Security to allow for secure authentication to the web server.
                            -- github.com/mygithubaccount/family-budget.git

                        Blogz
                        A school project completed in LC101, it allows users to sign up, create, and read blog posts.
                            -- Python, Flask, SQLAlchemy, Jinja, MySQL, and HTML.
                            -- Beyond the assigned tasks, I included a feature that allows users to delete, or edit their owned blog posts.
                            -- github.com/mygithub.account/blogz

                        Personal Portfolio -- myportfolio.com
                        A portfolio I am currently building. It will eventually contain links to my other projects, and document what I am currently learning.
                            -- React, JavaScript, HTML, CSS, and Bootstrap
                            -- I am currently learning React to incorporate into this project.
                            -- github.com/mygithubaccount/portfolio

                        -- YOU SHOULD INCLUDE A LIVE LINK TO YOUR PROJECT IF IT IS ACTUALLY CURRENTLY DEPLOYED.   
                        
                4. Technical Education
                    -- You need to show how you learned your technical skills. Include college courses you've taken, programs you've been a part of, books you have worked through, and MOOC's you have completed.
                    -- MOOC stands for Massive Open Online Course. I.E. Udacity, Udemy, EdX, KhanAcademy, etc.

                    EX:
                    TECHNICAL EDUCATION:
                    LC101
                    20 week program that focuses on programming fundamentals, web basics, and more advanced concepts with Java.
                        -- Curriculum covered: Python, Flask, Jinja2, SQLAlchemy, MySQL, Java, Spring, Hibernate, and Thymeleaf
                        -- Built multiple class projects

                    TeamTreeHouse.com
                        -- Worked through the Java, Spring curriculum of TeamTreeHouse.com
                        -- Skills: Java, Eclipse, Spring, Spring Security, Hibernat, and JDBC.
                        -- Videos to cover concepts, and projects to practice concepts.

                    CS Courses from UMSL
                        -- Completed 4 CS course from UMSL
                        -- Intro to Java Programming, Java Programming II, Intro to Databases, and Operating Systems I

                5. Other Experience
                    -- After including all the technical stuff, this is where you put your non-technical work experience.

                    EX:
                    WORK EXPERIENCE:
                    Assistant Manager, Upper Limits
                        -- Day to day operations of a rock climbing gym, tending register, performing saftey inspections, assisting customers, cleaning
                        -- Worked with Managers to plan, and run special events including Birthday Parties, Corporate Team Building, Climbing Competitions
                        -- Taught Rock Gym 101 - teaching novice climbers about top rope climbing, both how to, and necessary safety precautions

                    Manager/Technical Support, Cellular Communication
                        -- Provide technical support & information about mobile devices
                        -- Troubleshoot hardware / software problems for customers, and in house computers

                    -- This section can be quite long dbepending on the jobs you have had so far.
                    -- You should try to include as much of it as possible, but focusing primarily on your experiences with problem solving, learning new things on the job and working with others.

                6. Other Education
                    -- If you have any other formal education you didn't include in the Technical Education section.

            -- Final Notes
                -- YOUR RESUME SHOULD NOT BE LONGER THAN 2 PAGES!
                -- If it is, try to eliminate sections from your non-technical education or non-technical work experience. If you're still short, try reducing the number of bullet points for each item of your resume.
                -- FOCUS ON SHOWING YOUR PROBLEM SOLVING SKILLS!!
                -- You can make a master resume to keep track of everything, however, when you're applying for jobs and sending a professional resume, you don't want it to be longer than two pages. If you can, try to get it on one page.

        http://blog.thefirehoseproject.com/posts/personal-branding-software-developer/
        -- PERSONAL BRANDING AS A SOFTWARE DEVELOPER
            -- It is too easy to communicate through your personal branding in ways that pretty much ensure they will not move forward with you in the hiring process. Could be in your cover letter, resume, or in-person interview.

            -- MISTAKE #1: Nobody Hires Aspiring Developers, People Hire Developers
                -- It's subtle, but important. EX: Two people offer to give you a hair cut, one says, "I'll cut your hair, I am a hairdresser." and the other says, "I'll cut your hair, I want to become a hairdresser someday." Most people will completely dismiss the second person with the expectation that they don't know what thier doing.
                -- IF YOU SEND A MESSAGE THAT YOU ARE AN "ASPIRING DEVELOPER" RATHER THAN A "DEVELOPER", EMPLOYERS WILL IMMEDIATELY CONSIDER YOU TO BE UNQUALIFIED FOR THE POSITION.
                -- Even if you have a different job, you are a web developer first. Your identity is full-time web developer, your second job is what you use to pay the bills.
                -- In every intereaction, speak from the perspective of someone who is currently a web developer, not someone who maybe someday will be one.

            -- MISTAKE #2: Not Letting Your Personality Shine Through
                -- There are many successful career paths you can take. Startups need help with a variety of things. What makes development an interesting field for you?
                -- Becoming a web developer isn't easy. What's gotten you through the process?
                -- PASSION IS CONTAGIOUS! Take some time to recognize exactly what makes you passionate about programming.
                -- Employers are selfish. People generally agree that employees who genuinely love what they're doing will work longer hours and be more productive than the ones who are working principally for the paycheck. (Duh...! Haha)
                -- Having passion is a trait that you should express rather than hide.

                -- Some reasons you may be passionate about web development (cause I can't exactly put my finger on it... haha):
                    1. There are very few other crafts where you can build something real with only a text editor and time. There is something really satisfying about starting a project from scratch and building it into something that someone else can use.
                    2. It's not easy! The fact that there will always be additional challenges, more things to learn, and new technologies means that every single day, you can learn and grow as a developer. If you're embarking on a career as a web developer, you'll never be bored.
                    3. Programming can be fun! The satisfaction of solving complicated problems is REAL. The experience is incredibly rewarding, which is why many programmers suffer from a programming addiction.

                -- "How to Recognize a Good Programmer" top answer on Stack Overflow:
                    -- "Get them to talk about what they're interested in. I have yet to meet a developer who is really passionate when talking about programming, but can't actually code. They may well exist, of course - and your interview should check for competency as well - but passion is a good indicator in my experience. (Note that that's not the same as being about to "talk the talk" in terms of buzzwords.)
                    
                    Ask them what they don't like about their favorite language or platform. How would they fix things? What would they like to see in the next version? Do they have hobby projects? If they've got a blog, read it. Check their general online presence."

                -- "Choosing between two programmers: experience vs. passion." top answer on StackOverflow:
                    -- "Hire the inexperienced programmer with a passion for the craft. A passionate programmer will earn quickly, care about his work and enjoy doing it. I've worked with both types of programmers and I would always hire the passionate type over the experienced.

                    People who don't care about thier work eventually lead to problems in quality as well as in meeting deadlines.

                    Since you explicitly state that you have the resources to train someone, this is a no brainer. Hire the passionate programmer."

                -- If you're just starting out and you don't have the experience, your love of programming will need to shine through to counterbalance your lack of experience.
                -- YOUR PERSONALITY IS YOUR GREATEST ASSET!

            -- MISTAKE #3: Omitting Relevant Details
                -- Many people have had exposure to programming for longer than they take credit for. A college class, a hobby as a child, etc.
                -- Find things you've done in previous roles and find ways for those tasks to connect to development.
                    -- Analyzing problems and building systems and processes to solve them.
                    -- Automating processes and making sure they execute flawlessly.
                    -- Using technology to solve problems efficiently.

                -- Highlight previous experiences in which you've done tasks similar to these. If you looked hard enough, you can problem find examples of when you acted in a role that was similar to that of a web developer.
                -- Use any tool in your belt to add credibility to your claim that you are developer. SOMEONE WHO HAS REKINDLED AN OLD PASSION has more credibility as a developer than someone who started 2 weeks ago!
                -- Take any credit you can, amd make sure to include any instance in which you've used technology, automated processes or build systems on your resume. Whether you used code to make it happen or not.

            -- MISTAKE #4: Trying to Know Everything and Not Being Open to Learn
                -- Be honest and authentic about what you aren't an expert in!
                -- In general, people don't trust know-it-alls, and trying to trick your way into a position won't get you anywhere. Here's why:
                    -- One of the best qualities in a developer is a strong desire to continue to learn and be mentored by more senior developers! Especially try for the position of JUNIOR ENGINEER who is hired based on an investment in their long-term potential.
                -- Take the opportunity to show a willingness to learn new things. This isn't the same as expressing a willingness to take any offer you can get -- you'll likely end up among the people who struggle to land a job as a developer.
                -- The devs who get multiple offers are the ones who indicate a few traits:
                    -- A desire to grow and continuously learn the craft of engineering
                    -- Wanting to not just "get things done," but to desire to do things the right way. The buzzword "best practices" is something that will interest senior developers quite a bit.
                    -- Knowledge, experience, and willingness to write code in a "test-driven manner, keeping the red/green/refactor tight"
                    -- A desire to have a senior developer take you under their wing as a mentor to pair program and learn from the best.
                    -- A genuine interest in the company, its particular size, and engineering culture.

                -- SUMMARY: strong willingness to learn, humblness, and an open mind to new, better, or different approaches to engineering.

            -- PERSONAL BRANDING 101: Hone Your Storytelling Ability
                -- In every interaction -- cover letter, resume, phone screen, or interview -- the employer is looking to answer the question "WHO ARE YOU!?"
                -- Take the time to figure out who you are before trying to communicate it to other people.
                -- "Tell me about yourself" Ensure the following is true in your answer:
                    -- YOU ARE A WEB DEVELOPER: Not an aspiring one, you are not refocusing your career, and you are not hoping ot start a career in web development.
                    -- SHOWCASE YOUR PASSION FOR THE CRAFT: What makes you live, breathe, and sleep code? Weave this into your identity.
                    -- BRING IT TOGETHER: Figure out a way to explain that "you've been a web developer your whole life, even though you only got serious about it recently."
                    -- FEATURE A SINGLE PROJECT YOU'RE WORKING ON: Be read to explain WHY you're working on it, why it makes you excited, and what the next features you're planning ot build are.

            -- CASE STUDIES: THREE JUNIOR DEVELOPERS WITH STRONG PERSONAL BRANDS
                -- Person #1:
                    -- Before: After many years as a high school math teacher, I am refocusing my career path towards web developent. I am looking for a full-time job as a junior full-stack web developer and improving my skills as a programmer.
                    -- After: I am a web developer with experience primarily in Ruby on Rails, but with an interest in JavaScript and the front-end of applications. In a previous career, I was an 8th grade high school math teacher. When I started, the students didn't have a grasp on the fundamentals they needed, but after uncovering the problem, I dveloped the curriculum and process to help my students master linear algebra. I have been programming as a hobby since childhood, and I recently rekindled this passion. I seek a role as a web developer at a company where I can learn, grow and continue to master the craft.

                    -- KEY TAKEAWAYS:
                        -- The first sentence focuses specifically on web development and dives right into technology and CODING EXPERIENCE.
                        -- Since web development is all about problem solving, use opportunities to explain situations in which you've uncovered solutions and fixed them through implementing processes or technologies.
                        -- Finally, the new persepective shows a willingness to learn and grow as a developer.

                -- Person #2:
                    -- Before: I am an aspiring web developer who is looking to start a career building web applications. My previous career was a designer, where I led a small team.
                    -- After: I am a software engineer that has skills in both the back-end of web applications and the front-end. My previous career as a designer brought me close to my true passion: building web applications. I wasn't satisfied with only being involved in the visual aspect, and wanted a deeper involvement in building out applications. In the next phase of my career, I not only want to use my design skills to make the application look beautiful, but I also want to work on the technically challenging facets of the application, too. At my ideal company, I would work on a small team (5 - 8 people) that follows best practices like Test Driven Development and pair programming to help me learn and grow as a developer.

                    -- KEY TAKEAWAYS:
                        -- Again, the first sentence presents the person as a software engineer first, in the present tense, and without back-peddling.
                        -- There are a number of professions with which web developers interact on a regular basis: product managers, designers, customer service, and even sales teams. If you happened to work in one of these fields, talking about "looking from the outside in" is a neat trick to boost your credibility as a web developer.
                        -- If you hae a skill set that most developers don't bring to the table, and it could be relevant, mention it. An eye for design is something that is highly relevant to building beautiful, modern web applications.

                -- Person #3:
                    -- Before: After graduating college with a Master's in philosopy, I am starting a career as a web developer. I'm a hard worker with a positive attitude.
                    -- After: I am a programmer with strong skills in Ruby and Rails, and have an interest in solving algorithmically complex problems. I have a passion for problem solving. Currently, I am building a web application that is a marketplace where people can subscribe to other users to get access to video content they produce. The application currently has 25 active users.

                    -- KEY TAKEAWAYS:
                        -- Again, programming skills are mentioned up front.
                        -- You might have a compelling way to tie in your previous experiences and how they're relevant to a job as a web developer. When this happens, focus on the things you can control: projects you've built. If the product you're building is impressive, if you have any active users, or if it's polished and looks slick, people will know you're passionate about development.

            -- DON'T FALL PREY TO THE BIGGEST MISTAKE OF ALL
                -- Take a moment to really think through what your web developer identity is:
                    -- How can you make your background in a different field relevant for the current field?
                    -- What are situations in which you've problem solved by developing processes or automation to remove obstacles?
                    -- What excites you about whatever project you're currently working on?

                -- Once you figure out the answers to these questions, everything else will come naturally.
        
        http://www.lifeclever.com/give-your-resume-a-face-lift/
        -- GIVE YOUR RESUME A FACE LIFT

        https://www.reddit.com/r/jobs/comments/trja0/how_to_write_a_branding_statement/
        -- HOW TO WRITE A BRANDING STATEMENT
            -- Be concise (just two or three sentences).
            -- Quickly estabilish your qualifications.
            -- Highlight the way in which you plan to make a positive impact.
            -- Be written in "implied first person".

            1. Start with a title.
                -- This is straight forward and -- like all parts of the resume -- should be adjusted based on the positions to which you apply.
            
            2. The first sentence of the Branding Statement should speak to your high-level qualifications.
                -- Should be about education, most impressive accomplishments. Probably include LaunchCode.
            
            3. The second sentence should speak to the kind of impact you intend to make.
                -- Someone with little professional experience will have to treat this as more of an aspirational promise. Start by asking yourself what success would look like in the position to which you are applying (HINT: The job requisition is a good way to identify this.) The answer to that question is the basis for the second sentence.

        -- GitHub Profile
            -- Useful to show potential employers projects you've completed, how often you work on projects, how long you've been a programmer, and the different languages and technologies you've worked with.

            -- Username should be professional. CHECK!
            -- First impressions are very important, so your profile picture should be a nice shot of your face. CHECK!
            -- Bio is important!! Should quickly state who you are and what you're looking for. EX: I recently completed LC101 and am currently learning more about Java, Spring, and Hibernate. I am actively looking for development positions.
            -- Pinned repositories. CHECK!
            -- Project Readmes. 
                -- Includes requirements of your project, if someone wants to clone and run your project, and a brief description of what your project does. 
                -- You should have a project readme file for every project you want to share with a potential employer! 
                -- Gives you an ability to explain to the interviewer what the project does, what skills were used in the project, and what you will do with the project in the future.
                -- You can also add in a requirements section that shows what dependencies and environment they will need to use to run the project.
                -- You can also include images in your markdown file that may include screenshots of wireframes, actual views, or model diagrams of your project. That way you can show more than the actual project itself.

            -- GITHUB IS PUBLIC
                -- Anyone can search for it, and view any of the information on your profile. So share carefully!

        -- LinkedIn Profile
            -- Think of this as your digital resume! It should contain your professional experience, skills, and education.
            -- GitHub is a great demonstration of your technical skills, but the LinkedIn should be geared towards the HR department, giving you a chance to further explain yourself.
            -- Professional email and nice looking headshot!
            
            -- Contact Information
                -- Should include your professional email address and your phone number.

            -- Summary
                -- Most interviewers read this to get a high level understanding of what you are looking to do. THIS IS YOUR BRANDING STATEMENT.

            -- Core Skills
                -- This is the area where you may like to include some of the hard technical skills you are searching for, and other soft skills you have accumulated from non-tech education or experience.

            -- History
                -- An advantage of LinkedIn over a resume is that you can greatly expand upon your work history and education. You can also use the social networking aspect of it to connect with past coworkers and classmates that can verify the skills you include in your profile.

        https://www.codementor.io/learn-programming/9-linkedin-profile-tips-for-junior-developers
        -- 9 LINKEDIN PROFILE TIPS FOR NEW DEVELOPERS
            -- 94% of recruiters use LinkedIn to find candidates. Despite the heavy recruiter and hiring manager presence on the platform, only 36% of job seekers are active on LinkedIn! This leaves you with a huge advantage!
            
            -- Tip #1: Get your profile to 100%
                -- A complete profile is 40x more likely to receive opportunities through LinkedIn.
                -- Ranks higher in the internal algorithm, meaning you're more likely to be discovered in search results.

                -- Here's what makes your LinkedIn profile an all-star profile:
                    1. Profile picture
                    2. Location and industry
                    3. Experience (a current position, with a brief description, plus two previous positions)
                    4. Skills (at least 3)
                    5. Education
                    6. At least 50 connections

            -- Tip #2: Keywords are really important.
                -- Make sure the algorithm sends the right people your way by emphasizing the specific things you want to work with, such as particular languages and frameworks.
                -- Make sure to REMOVE skills and technologies you are not interested in working with. Or at least de-emphasize them.

            -- Tip #3: Use the summary section to your advantage.
                -- This is your only chance to freely write on LinkedIn. Tell your story and describe what motivates you.
                -- Don't use the word "motivate"! (The most over used word in summaries across all industries)
                -- So examples of how you are motivated, eg. "After discovering my passion for web development, I couldn't get enough. I made websites for friends and family, interned with a local business, and hired myself out as a freelance. I'm looking forward to bringing that pass to a full-time role."
                -- Include technologies and languages you want to work with.
                -- Write in first person -- like you are talking to a person, explaining what you do. Use your voice and sound natural.
                -- LinkedIn can tell when you're trying to game the system, so don't overuse keywords.
                -- Make sure your summary is 40+ words.

            -- Tip #4: Include a call-to-action
                -- You want people to be prompted to find out more about you, off your LinkedIn profile.
                -- EX:
                    1. Feel free to contact me directly at <your email>
                    2. Check out some of my design samples at <portfolio site>
                    3. See my GitHub repositories at <github profile>

                -- The idea is to intrigue hiring managers and recruiters; get them wanting to find out more about you, so they click to learn more or even reach out.

            -- Tip #5: Order your sections to draw attention to your most impressive experience
                -- You work in a job unrelated to web development right now, so your "Experience" section won't impress recruiters. You have taken some courses or done individual projects for yours or others, make sure to drag those higher on the hierarchy of your profile.
                -- Don't remove unrelated experience, rearrange to show projects first!

            -- Tip #6: Highlight transferable skills
                -- If you're tech skills are not all there yet, make sure to highlight any skills that may transfer from your current and previous non-tech positions.
                -- Remember: show, don't tell!
                -- Below are five transferrable skills which are valued in any role:
                    1. Communication skills, which can include writing, negotiating, presenting, and teaching / mentoring.
                    2. Teamwork or collaboration. Show you know this by mentioning collaboration tools you've used, give examples of ways you've worked with clients or teams, etc.
                    3. Planning and organization skills mean you are organized in though, communication, and workflow. Demonstrate this by showing processes you've developed.
                    4. Ability to manage multiple responsibilities means you can multitaks without getting stressed, rank your priorities, and stay disciplined.
                    5. Problem-solving skills means you can troubleshoot issues in new ways.

                -- Always note software / tools you are familiar with, such as Salesforce, Infusionsoft, Microsoft Excel, Asana, etc.

            -- Tip #7: Show examples of your work
                -- Especially important if you don't have a lot of experience to show yet.
                -- Add media to the summary, experience, and / or education sections.
                -- Inlcude links to your portfolio, Github, codepen, or blog.
                -- You could do a challenge! (You so should. First YouTube series?)
            
            -- Tip #8: Include your education
                -- Shows that you've studied and been tested on your tech knowledge, and you value self-improvement.
                -- People who fill out education section recieve 10 times more profile views than those who leave it blank.
                -- It doesn't need to be all formal college education! Coding bootcamp, yeah!
                -- There are two other sections titled "Certificates" and "Courses" where you can list things like a nanodegree from Udacity, courses you've taken on Codementor, etc.

            -- Tip #9: Hide the "People Also Viewed" box on your sidebar
                -- You're just making it easier for a recruiter, hiring manager, or client to scope out your competition.
                -- Take the box off your page by visiting "Privacy & Settings"