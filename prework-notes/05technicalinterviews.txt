NOTES ---

PROJECT MODULE
    -- How To Be a Good Mentee
        -- Make sure that you are meeting with your mentor regularly. If it's not a consistent basis, you won't be able to fully take advantage of your mentor's guidance.
        -- Building your network is your responsibility! Identify people in your mentor's circle to whom you would like to be introduced and ask your mentor to make the connection. Leverage your relationship with your mentor to meet people who will be important to you.
        -- Ask your mentor for critical feedback. It's so important to learn your weaknesses so that you begin the important work of improving and strengthening those weak spots.
        -- Discuss challenging assignments with your mentor. If you want to advance, you need to take on assignments that are out of your comfort zone. By talking these assignments through with your mento, you can benefit from their experience and use it as a helpful guide.
        -- Be grateful. Mentors take time out of ther busy schedule to help you, so never forget to show your appreciation for the work they do. Thank them often. And PAY IT FORWARD!

    -- How I Learned to Code in my 30s
        -- Things the author learned from contracting as an independent junior engineer:
            -- You spend as much time sourcing work as coding
            -- Getting projects lined up back-to-back is very hard
            -- You don't get a lot of technical feedback
            -- Inconsistent income creates stress at home
            -- There is no one to tell you if you are learning the right things

        -- YOU ONLY TRULY FAIL WHEN YOU GIVE UP.

        -- How the author got their internship
            -- He found a connection and volunteered. The connection gave him an internship opportunity.

        -- How to be a great intern
            -- Try not to let five minutes go by without acknowledging a message.
            -- Start answers with "yes" whenever possible.
            -- Invest an exorbitant level of energy into your work. Your mentor will reflect your intensity.
            -- Try not to ask your mentor what code does, or where a feature lives, before you have made an effort to find it, read it and understand it. If you still have a question, it will be more constructive.
            -- 2AM pull requests always look like hard work. (Or, maybe in my case, 6AM ones?)
            -- If you are serious, and you immerse, you will learn fast.

        -- What the author learned from interning: Immersion is the secret to rapid learning.
            -- Immersion means 100% focus. If possible, no friends, no drinking, no TV, just reading and writing code. If you take five minutes off to read the news, be aware you are breaking the mental state of immersion. Stay focused, be patient, your mind will adapt. Eliminate all distractions, of which you may find doubt to be the loudest. Immersion is teh difference between success and failure.

            -- How do you know if you are immersing? If you are not dreaming in code, you are not immersing yet.

        -- How the author got the job
            -- After learning more and immersing, the author was way more confident.
            -- Udacity has a technical interview course...
            -- Know about algorithms, code challenges, and data structures.

        -- FINAL THOUGHTS: IMMERSE, GET MENTORSHIP, and DON'T LOOK BACK! It will not be easy!!

CAREER MODULE
    -- How to prepare for (and ace) the technical interview
        -- Once they narrow down the candidates, they then begin the technical interview to see who is the most proficient.
        -- Some employers give homework in the form of programming or logic problems to complete before an in-person interview. If you're serious about the job, a little homework isn't going to deter you.
        
        -- TIPS AND TRICKS
            -- Be articulate and comunicate clearly.
                -- You must be able to articulate why a company should hire you.
                -- "Companies want to see the candidate think in 'real time', and while you may be brilliant at what you do, in an interview you have to be able to communicate this brilliance."
                -- It's good practice to take the time to go over what you would like to cover and how you want to present yourself.
                -- Research information about your potential company on LinkedIn, Facebook, and Glassdoor. Some of these sites even detail the technical interview.
                -- "You are selling you, so know your product and your audience, and have a plan going in. Study the job description, do some research on the people you will be meeting and definitely do some homework on the company beyond just their products."

            -- Be ready to whiteboard
                -- Practice ahead of time. It's "standard" (though VMLY&R doesn't do this)
                -- Also, take advantage of online practice resources, such as CodeFights or HackerRank. Offer free, anonymous coding challenges to help developers build and practic their skills.
                -- Programmers who complete 20 practice challenges on HackerRank -- equating to roughly ten to 20 hours of practice -- performed twice as well on skills assessments as programmers who didn't take the challenges.
                -- Junior developers who solved 20 challenges, increased their chances by at least 15 percent.

            -- Dive deeply into the job listing
                -- Will give you insight into the technologies in use at the prospective employer and how best to apply your knowledge and skills to the problems they face.
                -- "If it's in the job description, it's important to be able to talk to it and how you may solve the problems they are looking to fix. Make sure you really understand the technical requirements outlined in the job description. They were put there to provide guidance on what tht ecompany is looking for to ensure candidates are the right fit."

            -- Shore up the fundamentals
                -- The fundamentals of algorithms and data structures tend to be the focus of many technical screenings.
                -- "Fundamental knowledge is ESSENTIAL."
                -- Dive a little deeper into topcis about which you have only general knowledge.
                -- There's no standard process for demonstrating your programming skills; sometimes terminology can differ between companies or even between two programmers skilled in the same language.
            
            -- Bring in a portfolio of your work
                -- This can mean a physical notebook, a link to your GitHub repository, samples of projects you've worked on (CodePen, too!) -- anything that can serve as a real-world example of your skills and experience.
                -- Self-taught developers often come up short when it comes to solution design and writing clean code. Study this!
                -- Find a friend or someone to sit down with to review your code and give you feedback about how to make it better and cleaner. LISTEN!

            -- Prepare yourself mentally
                -- When preparing for the interview, you need to put yourself in the right mindset regardless of how your day is going.
                -- "A lot of it is in the mindset you carry into the interview from a perparation standpoint."
                -- GO over your notes and terminology, prepare some mental notes. Think about thing you want to say in the interview that demonstrate your experitse and ask yourself how you'll articulate that. Think about what questions the interviewer will ask you. Then, think about how you'd answer.
                -- Don't be afraid to ask questions!! (Always. Anywhere, really.)
                -- "If they ask a technical question, make sure you understand it before diving in and answering. If you don't know the answer, that doesn't mean you're dead in the water."
                -- Companies aren't always looking for the "right" answer. Many look for soft skills and evidence of how you go about solving problems and resolving issues.
                -- They're also evaluating you on how you talk about what you've done in the past as well as how you're thinking about and solving problems.
                -- If you find yourself stumped, don't panic! (23!!)
                -- It's possible you know the answer but your nerves have got the best of you and it's important to be honest about that. Just apologize and say something like, 'I just used that command last week, even though it's not coming to mind right now. If I was on the job, here is what I would do to find the answer.'
                -- If it's something you really don't know, say something like, "Unfortunately, I ahven't had the opportunity to work with C#; however, I have so much experience in VB.NET that I feel like I can transition easily" or whatever
                -- Don't lie!!!!
                -- If you don't know, try and draw a parallel or make a connection between something relative that you have worked with or on.
                -- Once you've answered the question and outlined your solution, finish up with a confirming question like "Did that answer your question? Did I provide you with the answer you are looking for? Is there any part you'd like me to go into more detail on?"
                -- Don't assume, cause there could be a disconnect.

            -- Have a strong closing
                -- Many interviews end awkwardly. Use the last few minutes to ask questions about the company, the culture, the projects and initiatives the company's involved with, and especially to let the interviewer know why you're the right person for the job.
                -- If there are specific aspects about your work history, skills or experience that weren't covered -- or that you want to reiterate -- this is the time to emphasize those.
                -- After the meeting, jot down notes, thoughts or feedback yo have while the memorie are still fresh. WRITE DOWN THE INTERVIEWERS' NAMES, roles and any other arelevent info.

            -- Follow up and send a thank-you note
                -- You want the interviewer to remember you for the right reasons.
                -- Make sure to send a thank you note using the interviewers' names, recalling some of the high points of the interview and expressing why you're the right fit.
    
    -- 10 Tech Interview Errors
        -- Appearance: Don't just dress from "the waist up". Make sure your whole outfit looks good and presentable. Like you care about the job.
        -- Arrogance: Confidence is desirable, not arrogance. That suggests "they can't be a team player." Try not to come across this way.
        -- Overemphasizing Skills: You want to come across as more than an amalgam of your skills. Certifications and other credientials matter, as does your technical knowledge, but you're there to serve an organization's needs, not focus on J2EE or Cisco just for the sake of the technology itself.
        -- Not communicating: Don't respond with too brief answers. You should think of each question as an opening to a conversation. "People who are unwilling to communicate will have a hard time working in a team environment."
        -- Unprepared: Perparation doesn't just mean passing knowledge about a company, but rather in-depth research about the firm and its industry.
        -- Lack of Interest: When you are asked if you have any questions, NEVER SAY NO. It communicates that you are not interested or not prepared.
        -- Too Eager for Perks: Questions about parking spaces, sick days, free soft drinks, etc should be reserved for HR when you get the job offer. "Stay away from 'what's-in-it-for-me' questions."
        -- Too Casual: The interviewer, not the candidate, should set the tone. Being too casual can come across as a lack of seriousness, or even a lack of interest in the job.
        -- Too Negative: Don't mistake the interviewer's friendliness with an invitation to confide in them. Don't use your interviews as a therapy session.
        -- Failure to Close: Make sure to close the interview. Emphasize how much you would love to join the company or ask what the next step is. Don't let it just fade out. You'll come across as not selling yourself.

    -- LaunchCode's Framework for Answering Interview Questions
        -- PRO TIP: If you are more familiar with another strategy for answering interview questions, like the STAR method, feel free to use whichever strategy you are more comfortable with.

        -- Claim and Evidence
            -- Every question you get in an interview should include at least two things: your CLAIM and EVIDENCE to support your claim.
            -- While a claim can answer a question directly, and interviewers like straightforward claim-type answers, but it's not usually enough.
            -- They are trying to determine how you will do the job being offered, so, the best way to demonstrate that is to explain how you've behaved in similar situations.
            -- The interviewer should not experience any confusion and have a strong understanding of the message you are trying to convey.

                EX: "What is your greatest strength?"
                "(CLAIM) My greatest strength is my ability to learn quickly by using multiple resources. (EVIDENCE) For example, LC101 requires all students to complete prep-work, attend lectures, participate in group activities, and complete assignments for every chapter. In addition to what LC101 required, I also set up an additional study group and invited all the students from my class to join. Our group of four regular members met on Saturday mornings; we would review the concepts covered in the course, and we worked through FreeCodeCamp's Front End Development lessons after we had completed our assigned LC101 work. Not only was I challenging myself to learn an additional programming language with this new resource, but it helped reinforce the concepts I was learning in LC101. Both Pythong and JavaScript use variables, loops, conditionals, data types, functions, etc. Now that LC101 has ended, I've been taking courses on Udemy, and am focusing on learning Angular."

                -- This story contains a lot of evidence to suppor the original claim. Mentioning, Udemy, FreeCodeCamp, LC101, and additional collaboration in an organized small group. And sharing some specific things they've learned. The interviewer can further trust this person's claim because they have evidence to support it.

                EX: "Tell us about a difficult project that you ultimately failed."
                "(CLAIM) Before I signed up for LC101, I decided to learn programming on my own and tried to make it through CS50x. I was not able to keep up with the pace of the class, and ultimately had to withdraw. I learned from this experience and was able to adapt some habits that made me successful in LC101. (EVIDENCE) When I first started CS50x, I was excited to learn to program, but didn't have any experience with programming. I watched the first lecture, and really enjoyed the Professor, David May, but when I got to the first assignment, I didn't feel that I knew how to solve the problem. I waited a couple of days after watching the video, and I struggled with setting up the environment CS50x wanted us to use. By the time I had everything set up and figured out how to solve the problem, my assignment was a few days late. This in turn made me a few days behind starting the next video, and then I was late on the next assignment, and after the first five or so weeks, I was overwhelmed and decided to drop the course. I watched the rest of the lectures, but didn't attempt any more assignments. I also found the forums students could use after dropping the course. I can clearly see the problems now; I started the assignments late, I was isolated from my other classmates, and I was not using outside resources to help me when I got stuck. So, I made sure that when I signed up for LC101 that I started my assignments early and asked questions often. I started a small study group to make sure I was working with other programmers and I used outside resources to help me when I was stuck. All three of these changes helped me excel in LC101, and now I feel confidence about my programming skills!"

                -- This one is a little longer becuase they are trying to fully explain the situation as the interviewer doesn't want to JUST hear about the failure, but how they learned from it.

    -- How to Answer the 10 Most-Asked Tech Interview Questions
        https://www.indeed.com/prime/resources/talent/how-to-answer-the-10-most-asked-tech-interview-questions
        
        -- What are your weaknesses?
            -- Naming a weakness that is actually a strength is the fastest way to come off as inauthentic. Your interviewer has seen it before and they will respect you (and trust you) less.
            -- Show self-awareness (and remember how much your personally value it) and honesty by sharing a real weakness and then describe how you solve it.
                EX: "Sometimes I lose drive in the middle of a project after the launch excitement has worn off. I combat that by breaking up the project into mini-milestones and celebrating them with my team. The original buzz gets recreated and it becomes obvious how crucial our work is."

        -- How familiar are you with [specific programming language]?
            -- Your interviewer is checking to see if you're comfortable with the language. You don't need to be a senior level expert!
            -- Don't get hung up on your skill level per language. Instead, emphasize how well-versed you are in coding as a skill, and how well you solve problems.
            -- They're not looking for perfection, but rather competency and drive.

        -- The brainteaser or story problem
            -- It is not a test of your intelligence. You're most likely in the same smartness range as the other applicants for this job, so your aptitude has already been vetted.
            -- They are testing your sense of logic, your coolness under pressure, and your ability to openly think through problems while asking questions.
            -- ANSWER THIS QUESTION CONVERSATIONALLY!
            -- Talk your way through it. Ask clarifying questions. Be curious. Say you're thinking it through and figuring it out. Logically anaylze -- out loud -- the different ways to approach it. Talk through why you'd lean a certain way, and eventually give your answer.
            -- REMEMBER: Getting a certain answer is far less important than coming across in real-time as verbal, open and analytical.

        -- Have you interviewed anywhere else?
            -- Play it safe. Keep your response laid-back and general.
                EX: "Yes, I'm actively looking for other great roles like thils." Or, "I'm moving quickly with other companies with competitive offers."
            
        -- Do you work best alone or on a team?
            -- Don't pick a side! Ideally, you should be a "master" of both solo, unsupervised work and agile collaboration.
                EX: "I love the speed and energy of teamwork, and I also like concentrated time to work alone and execute on projects."

        -- Why are you leaving your company?
            -- Hiring managers are looking for honesty, but not baggage!
            -- Emphasize positivity and your hopes for the future.
            -- Don't say, "I'm cut off from collaborating and feel isolated." Say, "I'm looking to be a key player on a driven, talented team."
            -- Don't say, "I'm unchallenged and need more to do." Say, "I'm really excited to grow and develop my skills and tackle new opportunities."

        -- What salary are you looking for?
            -- You want to diplomatically avoid answering becauase you don't know what their budget range is for the position, so giving a number in the dark could disqualify you if you're too low or too high.
            -- Politely deflect by trying, "I'm sure what you're paying is in step with the industry norms." Or: "It's hard to specify a salary range becuase this is a new type of role for me." Or: "Based on what my responsibilities would be, I'm sure we can figure out compensation that makes sense."

        -- The programming test
            -- More likely to be in your 2nd or 3rd interview round. Be prepared for it in the first interview, just in case.
            -- REMEMBER: The way you solve the problem is being evaluated just as much as your final answer.
            -- Practicing increases skills, and being prepared makes you calme. So devote time to taking practice tests before the interview.
                -- Codewars -- https://www.codewars.com/
                -- Topcoder -- https://www.topcoder.com/
                -- Hackerrank -- https://www.hackerrank.com/

                Mock live-interview coding test:
                -- Pramp -- https://www.pramp.com/
                -- Gainlo -- http://www.gainlo.co/#!/

        -- What do you do for fun?
            -- This question is being asked because your interviewer wants to see your personality.
            -- Simply smile and share what you enjoy doing. Your eyes will naturally light up, letting the interviewer know that you're fun and friendly.

        -- What are your strengths?
            -- The answer to this has been spelled out for you in the job description!
            -- Look at the "Ideal Qualifications" section. Find two items that describe you, and brainstorm specific examples of how you demonstrated those characteristics on the job.

    -- The Ultimate Guide to Acing Your Technical Interview
        https://learntocodewith.me/posts/technical-interview/